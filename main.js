// Generated by CoffeeScript 1.7.1
(function() {
  var FPS, Node, Point, addNewPoint, canvas, clicked, colors, ctx, d, drag, fill_colors, fps_el, fps_timer, getNodeForPoint, hideInfoPanel, hot_points, i, info_panel, is_highlighing_points, keyDowned, log, mouse, mouseMoved, mousedOver, past_now, points, pre_canvas, pre_ctx, quad_tree, renderFrame, showInfoPanel, toggleInfoPanel, update_fps, _i;
  log = console.log.bind(console);
  d = document;
  canvas = d.getElementById('main');
  info_panel = d.getElementById('info');
  ctx = canvas.getContext('2d');
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight - 2;
  pre_canvas = d.createElement('canvas');
  pre_canvas.width = canvas.width;
  pre_canvas.height = canvas.height;
  pre_ctx = pre_canvas.getContext('2d');
  pre_ctx.lineWidth = "1";
  pre_ctx.strokeStyle = "red";
  pre_ctx.fillStyle = "#445544";
  colors = ['red', 'green', 'blue', 'yellow'];
  fill_colors = ['#000000', '#111111', '#202020', '#333333', '#404040', '#555555', '#606060', '#777777', '#888888', '#999999', '#a0a0a0', '#bbbbbb', '#c0c0c0', '#dddddd', '#e0e0e0', '#FFFFFF'];
  drag = 1 - 0.002;
  mouse = {
    x: 0,
    y: 0
  };
  is_highlighing_points = true;
  addNewPoint = function() {
    var p;
    p = new Point();
    points.push(p);
    return quad_tree.add(p);
  };
  getNodeForPoint = function(x, y) {};
  past_now = (new Date()).getTime() * 0.001;
  fps_el = d.getElementById('fps');
  update_fps = function() {
    var elapsed_time, now;
    now = (new Date()).getTime() * 0.001;
    elapsed_time = now - past_now;
    past_now = now;
    fps_timer.update(elapsed_time);
    return fps_el.textContent = "" + fps_timer.average_FPS + " fps";
  };
  points = [];
  Point = (function() {
    function Point(x, y) {
      this.x = x;
      this.y = y;
      this.x = (Math.random() * 100 - 50) + canvas.width * 0.5;
      this.y = (Math.random() * 100 - 50) + canvas.height * 0.5;
      this.vel = {
        x: Math.random() * 4 - 2,
        y: Math.random() * 4 - 2
      };
      this.color = 'cyan';
      this.size = 5;
      this.drag = drag;
      this.ctx = pre_ctx;
    }

    Point.prototype.update = function() {
      this.vel.x *= this.drag;
      this.vel.y *= this.drag;
      this.x += this.vel.x;
      this.y += this.vel.y;
      return this.checkBounds();
    };

    Point.prototype.checkBounds = function() {
      if (this.x < 0 || this.x > canvas.width - this.size) {
        this.vel.x *= -1;
      }
      if (this.y < 0 || this.y > canvas.height - this.size) {
        return this.vel.y *= -1;
      }
    };

    Point.prototype.draw = function() {
      var mag;
      mag = this.vel.x * this.vel.x + this.vel.y * this.vel.y;
      this.ctx.fillStyle = "hsl(" + (mag * 60 + 210) + ", 100%, 50%";
      return this.ctx.fillRect(this.x, this.y, this.size, this.size);
    };

    Point.prototype.highlight = function() {
      this.ctx.lineWidth = "2";
      this.ctx.strokeStyle = 'white';
      this.ctx.beginPath();
      this.ctx.rect(this.x - 2, this.y - 2, this.size + 4, this.size + 4);
      return this.ctx.stroke();
    };

    return Point;

  })();
  Node = (function() {
    function Node(x, y, width, height, level) {
      this.x = x;
      this.y = y;
      this.width = width;
      this.height = height;
      this.level = level != null ? level : 0;
      this.objs = [];
      this.max_objs = 10;
      this.max_levels = 6;
      this.sub_nodes = [];
      this.color = 'green';
      this.ctx = pre_ctx;
      this.obj_color = 0;
      this.mult = 255 / this.max_objs;
    }

    Node.prototype.draw = function() {
      var node, _i, _len, _ref, _results;
      this.ctx.strokeStyle = this.color;
      this.obj_color = this.objs.length * this.mult;
      this.ctx.fillStyle = this.objs.length < this.max_objs + 1 ? "rgba(" + (Math.floor(this.obj_color)) + ", " + (Math.floor(this.obj_color)) + ", " + (Math.floor(this.obj_color)) + ", 0.2)" : '#FFFFFF';
      this.ctx.fillRect(this.x, this.y, this.width, this.height);
      _ref = this.sub_nodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(node.draw());
      }
      return _results;
    };

    Node.prototype.add = function(obj) {
      var index, _i, _len, _ref, _results;
      if (this.sub_nodes.length !== 0) {
        index = this.getIndex(obj);
        if (index !== -1) {
          this.sub_nodes[index].add(obj);
          return;
        }
      }
      this.objs.push(obj);
      if (this.objs.length > this.max_objs && this.level < this.max_levels) {
        if (this.sub_nodes.length === 0) {
          this.split();
        }
        _ref = this.objs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          obj = _ref[_i];
          index = this.getIndex(obj);
          if (index !== -1) {
            this.sub_nodes[index].add(obj);
            _results.push(this.remove(obj));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    Node.prototype.getIndex = function(obj) {
      var index, midpoint;
      index = -1;
      midpoint = {
        x: this.x + this.width * 0.5,
        y: this.y + this.height * 0.5
      };
      if (obj.x < midpoint.x && obj.y < midpoint.y) {
        index = 0;
      }
      if (obj.x > midpoint.x && obj.y < midpoint.y) {
        index = 1;
      }
      if (obj.x > midpoint.x && obj.y > midpoint.y) {
        index = 2;
      }
      if (obj.x < midpoint.x && obj.y > midpoint.y) {
        index = 3;
      }
      return index;
    };

    Node.prototype.getNearbyObjs = function(obj) {
      var index, objs;
      objs = this.objs.slice(0);
      index = this.getIndex(obj);
      if (index !== -1 && this.sub_nodes.length !== 0) {
        return this.sub_nodes[index].getNearbyObjs(obj);
      }
      return objs;
    };

    Node.prototype.remove = function(obj) {
      var index;
      index = this.objs.indexOf(obj);
      if (index !== -1) {
        return this.objs = this.objs.slice(0, index);
      }
    };

    Node.prototype.split = function() {
      var half_height, half_width, level, x, y;
      half_width = this.width * 0.5;
      half_height = this.height * 0.5;
      level = this.level + 1;
      x = this.x;
      y = this.y;
      this.sub_nodes[0] = new Node(x, y, half_width, half_height, level);
      this.sub_nodes[1] = new Node(x + half_width, y, half_width, half_height, level);
      this.sub_nodes[2] = new Node(x + half_width, y + half_height, half_width, half_height, level);
      return this.sub_nodes[3] = new Node(x, y + half_height, half_width, half_height, level);
    };

    Node.prototype.clear = function() {
      var node, _i, _len, _ref;
      this.objs = [];
      if (this.sub_nodes.length !== 0) {
        _ref = this.sub_nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          node.clear();
        }
      }
      return this.sub_nodes = [];
    };

    return Node;

  })();
  FPS = (function() {
    FPS.NUM_FRAMES_TO_AVERAGE = 16;

    function FPS() {
      var tt, _i, _ref;
      this.total_time_ = FPS.NUM_FRAMES_TO_AVERAGE;
      this.time_table_ = [];
      this.time_table_cursor_ = 0;
      for (tt = _i = 0, _ref = FPS.NUM_FRAMES_TO_AVERAGE - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; tt = 0 <= _ref ? ++_i : --_i) {
        this.time_table_[tt] = 1.0;
      }
    }

    FPS.prototype.update = function(elapsed_time) {
      this.total_time_ += elapsed_time - this.time_table_[this.time_table_cursor_];
      this.time_table_[this.time_table_cursor_] = elapsed_time;
      ++this.time_table_cursor_;
      if (this.time_table_cursor_ === FPS.NUM_FRAMES_TO_AVERAGE) {
        this.time_table_cursor_ = 0;
      }
      this.instantaneous_FPS = Math.floor(1.0 / elapsed_time + 0.5);
      return this.average_FPS = Math.floor((1.0 / (this.total_time_ / FPS.NUM_FRAMES_TO_AVERAGE)) + 0.5);
    };

    return FPS;

  })();
  fps_timer = new FPS();
  quad_tree = new Node(0, 0, canvas.width, canvas.height);
  window.quad_tree = quad_tree;
  for (i = _i = 0; _i <= 1000; i = ++_i) {
    addNewPoint();
  }
  hot_points = [];
  renderFrame = function() {
    var p, point, _j, _k, _len, _len1;
    requestAnimationFrame(renderFrame);
    pre_ctx.clearRect(0, 0, pre_canvas.width, pre_canvas.height);
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    quad_tree.clear();
    for (_j = 0, _len = points.length; _j < _len; _j++) {
      p = points[_j];
      p.update();
      quad_tree.add(p);
      p.draw();
    }
    if (is_highlighing_points === true) {
      hot_points = quad_tree.getNearbyObjs(mouse);
      for (_k = 0, _len1 = hot_points.length; _k < _len1; _k++) {
        point = hot_points[_k];
        point.highlight();
      }
    }
    quad_tree.draw();
    ctx.drawImage(pre_canvas, 0, 0);
    return update_fps();
  };
  renderFrame();
  showInfoPanel = function() {
    canvas.classList.add('scooched_right');
    info_panel.classList.add('open');
    return is_highlighing_points = false;
  };
  hideInfoPanel = function() {
    canvas.classList.remove('scooched_right');
    info_panel.classList.remove('open');
    return is_highlighing_points = true;
  };
  toggleInfoPanel = function() {
    if (info_panel.classList.contains('open')) {
      return hideInfoPanel();
    } else {
      return showInfoPanel();
    }
  };
  keyDowned = function(evt) {
    var SPACE, key_pressed;
    SPACE = 32;
    key_pressed = evt.keyCode;
    if (key_pressed === SPACE) {
      return addNewPoint();
    }
  };
  mouseMoved = function(evt) {
    return mouse = {
      x: evt.clientX,
      y: evt.clientY
    };
  };
  clicked = function(evt) {
    if (evt.target.id === 'nub') {
      toggleInfoPanel();
    }
    if (evt.target.id === 'main') {
      return hideInfoPanel();
    }
  };
  mousedOver = function(evt) {};
  d.addEventListener('keydown', keyDowned);
  d.addEventListener('mousemove', mouseMoved);
  d.addEventListener('click', clicked);
  return d.addEventListener('mouseover', mousedOver);
})();

/*
//@ sourceMappingURL=main.map
*/
